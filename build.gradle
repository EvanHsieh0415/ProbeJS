plugins {
    id 'base'
    id 'java'
    id 'maven-publish'
    id "dev.architectury.loom" version "1.6-SNAPSHOT"
    id "me.shedaniel.unified-publishing" version "0.1.+"
}

version = "${mod_version}"
neoforge_version = "${neoforge_version}"
group = project.maven_group

loom {
    silentMojangMappingsLicense()
    accessWidenerPath = file("src/main/resources/probejs.accesswidener")

    runs {
        client {
            vmArgs("-XX:+IgnoreUnrecognizedVMOptions", "-XX:+AllowEnhancedClassRedefinition")
            runDir = 'run'
        }
    }
}


compileJava {
    options.encoding = "UTF-8"
    options.release.set(21)
}

java {
    sourceCompatibility = targetCompatibility = '21'
    withSourcesJar()
}

processResources {
    def toReplace = [
            "version"         : project.version,
            "neoforge_version": project.neoforge_version,
            "kubejs_version"          : project.kubejs_version,
    ]

    println("[Process Resources] Replacing properties in resources: " + toReplace)

    inputs.properties toReplace
    filesMatching("META-INF/neoforge.mods.toml") {
        expand toReplace
    }
}


repositories {
    mavenLocal()
    mavenCentral()

    maven {
        url "https://maven.architectury.dev/"
    }

    maven {
        url "https://maven.latvian.dev/releases"
        content {
            includeGroup "dev.latvian.mods"
        }
    }

    maven {
        url "https://maven.neoforged.net/releases"
    }

    maven {
        url "https://maven.blamejared.com"
        content {
            includeGroup "mezz.jei"
            includeGroup "net.darkhax.bookshelf"
            includeGroup "net.darkhax.gamestages"
        }
    }

    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
}

dependencies {
    minecraft "com.mojang:minecraft:$minecraft_version"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-1.20.6:$parchment_version@zip")
    }

    neoForge("net.neoforged:neoforge:$neoforge_version")
    modApi("dev.latvian.mods:rhino:$rhino_version") { transitive(false) }
    modApi("dev.latvian.mods:kubejs-neoforge:$kubejs_version")
    modApi("dev.architectury:architectury-neoforge:$architectury_version")

    compileOnly 'org.java-websocket:Java-WebSocket:1.5.6'
    compileOnly 'com.github.javaparser:javaparser-symbol-solver-core:3.25.8'
    compileOnly 'com.github.javaparser:javaparser-core:3.25.8'
    compileOnly "org.vineflower:vineflower:1.10.1"

    include 'org.java-websocket:Java-WebSocket:1.5.6'
    include 'com.github.javaparser:javaparser-symbol-solver-core:3.25.8'
    include 'com.github.javaparser:javaparser-core:3.25.8'
    include "org.vineflower:vineflower:1.10.1"
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.mod_id,
                "Specification-Vendor"    : project.mod_author,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : project.mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

remapJar {
    atAccessWideners.add "probejs.accesswidener"
}
plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = file("src/main/resources/probejs.accesswidener")

    forge {
        convertAccessWideners = true
        mixinConfig("probejs.mixins.json")
    }
}

configurations {
    shadowCommon
}

dependencies {
    forge("net.neoforged:forge:${rootProject.minecraft_version}-${rootProject.forge_version}")

    modImplementation "dev.latvian.mods:kubejs-forge:${rootProject.kubejs_version}"
    modImplementation "dev.latvian.mods:rhino-forge:${rootProject.rhino_version}"

    compileOnly 'org.java-websocket:Java-WebSocket:1.5.6'
    compileOnly 'com.github.javaparser:javaparser-symbol-solver-core:3.25.8'
    compileOnly 'com.github.javaparser:javaparser-core:3.25.8'
    compileOnly "org.vineflower:vineflower:1.10.1"

    include 'org.java-websocket:Java-WebSocket:1.5.6'
    include 'com.github.javaparser:javaparser-symbol-solver-core:3.25.8'
    include 'com.github.javaparser:javaparser-core:3.25.8'
    include "org.vineflower:vineflower:1.10.1"
}

repositories {
    mavenCentral()
    maven {
        name "ModMaven (JEI)"
        url "https://modmaven.dev/"
        content {
            includeGroup "net.darkhax.bookshelf"
            includeGroup "net.darkhax.gamestages"
        }
    }
    maven {
        url "https://maven.blamejared.com"
        content {
            includeGroup "mezz.jei"
        }
    }
    maven {
        url "https://maven.neoforged.net/releases"
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        def props = [
                "version"       : project.version,
                "kubejs_version": "${rootProject.kubejs_version}"
        ]
        expand(props)
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "forge"
}

jar {
    classifier "dev"
}

sourcesJar {

}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
